{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Henriqueqb/Henrique/blob/main/Imers%C3%A3o_IA_Alura_%2B_Google_Gemini_Aula_05_Agentes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%pip -q install google-genai"
      ],
      "metadata": {
        "id": "UCCbECexLk_h"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Configura a API Key do Google Gemini\n",
        "\n",
        "import os\n",
        "from google.colab import userdata\n",
        "\n",
        "os.environ[\"GOOGLE_API_KEY\"] = userdata.get('GOOGLE_API_KEY')"
      ],
      "metadata": {
        "id": "NfCqHo1tLk8P"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Configura o cliente da SDK do Gemini\n",
        "\n",
        "from google import genai\n",
        "\n",
        "client = genai.Client()\n",
        "\n",
        "MODEL_ID = \"gemini-2.0-flash\""
      ],
      "metadata": {
        "id": "bV4w0H5TLk5g"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Pergunta ao Gemini uma informação mais recente que seu conhecimento\n",
        "\n",
        "from IPython.display import HTML, Markdown\n",
        "\n",
        "# Perguntar pro modelo quando é a próxima imersão de IA ###############################################\n",
        "resposta = client.models.generate_content(\n",
        "    model=MODEL_ID,\n",
        "    contents=\"Quando é a proxima imersão IA com Google Gemini da Alura?\"\n",
        ")\n",
        "\n",
        "# Exibe a resposta na tela\n",
        "display(Markdown(f\"Resposta:\\n {resposta.text}\"))"
      ],
      "metadata": {
        "id": "HwVP7Xi34Zuw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 162
        },
        "outputId": "6e0ade72-922c-4a35-ff54-c234ff33c7fb"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Markdown object>"
            ],
            "text/markdown": "Resposta:\n A Alura não tem uma data fixa para a próxima Imersão IA com Google Gemini. A melhor forma de saber quando a próxima edição será lançada é:\n\n*   **Acompanhar a página da Alura:** Fique de olho na página principal da Alura e na seção de cursos de Inteligência Artificial. Eles costumam anunciar novas edições por lá.\n*   **Seguir as redes sociais da Alura:** Siga a Alura no LinkedIn, Instagram, e outras plataformas. Eles frequentemente divulgam novidades e lançamentos por lá.\n*   **Assinar a newsletter da Alura:** Ao assinar a newsletter, você receberá informações sobre novos cursos e eventos diretamente no seu e-mail.\n\nVocê pode encontrar mais informações e se inscrever na newsletter no site da Alura: [https://www.alura.com.br/](https://www.alura.com.br/)"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Pergunta ao Gemini uma informação utilizando a busca do Google como contexto\n",
        "\n",
        "response = client.models.generate_content(\n",
        "    model=MODEL_ID,\n",
        "    contents='Quando é a próxima Imersão IA com Google Gemini da Alura?',\n",
        "    # Inserir a tool de busca do Google ###############################################\n",
        "    config={\"tools\": [{\"google_search\":{}}]}\n",
        ")\n",
        "\n",
        "# Exibe a resposta na tela\n",
        "display(Markdown(f\"Resposta:\\n {response.text}\"))"
      ],
      "metadata": {
        "id": "yXaZd7iZ4ftw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 64
        },
        "outputId": "65e66b87-299d-45ac-8f62-e9bda4224c9b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Markdown object>"
            ],
            "text/markdown": "Resposta:\n A próxima Imersão IA com Google Gemini da Alura aconteceu entre os dias 12 e 16 de maio de 2025. As inscrições estiveram abertas até o dia 11 de maio.\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibe a busca\n",
        "print(f\"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}\")\n",
        "# Exibe as URLs nas quais ele se baseou\n",
        "print(f\"Páginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}\")\n",
        "print()\n",
        "display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))"
      ],
      "metadata": {
        "id": "xHSNlTd84heJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 117
        },
        "outputId": "1e6a81b7-22dd-4b20-d43b-4300706e27fd"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Busca realizada: ['Próxima Imersão IA com Google Gemini Alura']\n",
            "Páginas utilizadas na resposta: starten.tech, youtube.com\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<style>\n",
              ".container {\n",
              "  align-items: center;\n",
              "  border-radius: 8px;\n",
              "  display: flex;\n",
              "  font-family: Google Sans, Roboto, sans-serif;\n",
              "  font-size: 14px;\n",
              "  line-height: 20px;\n",
              "  padding: 8px 12px;\n",
              "}\n",
              ".chip {\n",
              "  display: inline-block;\n",
              "  border: solid 1px;\n",
              "  border-radius: 16px;\n",
              "  min-width: 14px;\n",
              "  padding: 5px 16px;\n",
              "  text-align: center;\n",
              "  user-select: none;\n",
              "  margin: 0 8px;\n",
              "  -webkit-tap-highlight-color: transparent;\n",
              "}\n",
              ".carousel {\n",
              "  overflow: auto;\n",
              "  scrollbar-width: none;\n",
              "  white-space: nowrap;\n",
              "  margin-right: -12px;\n",
              "}\n",
              ".headline {\n",
              "  display: flex;\n",
              "  margin-right: 4px;\n",
              "}\n",
              ".gradient-container {\n",
              "  position: relative;\n",
              "}\n",
              ".gradient {\n",
              "  position: absolute;\n",
              "  transform: translate(3px, -9px);\n",
              "  height: 36px;\n",
              "  width: 9px;\n",
              "}\n",
              "@media (prefers-color-scheme: light) {\n",
              "  .container {\n",
              "    background-color: #fafafa;\n",
              "    box-shadow: 0 0 0 1px #0000000f;\n",
              "  }\n",
              "  .headline-label {\n",
              "    color: #1f1f1f;\n",
              "  }\n",
              "  .chip {\n",
              "    background-color: #ffffff;\n",
              "    border-color: #d2d2d2;\n",
              "    color: #5e5e5e;\n",
              "    text-decoration: none;\n",
              "  }\n",
              "  .chip:hover {\n",
              "    background-color: #f2f2f2;\n",
              "  }\n",
              "  .chip:focus {\n",
              "    background-color: #f2f2f2;\n",
              "  }\n",
              "  .chip:active {\n",
              "    background-color: #d8d8d8;\n",
              "    border-color: #b6b6b6;\n",
              "  }\n",
              "  .logo-dark {\n",
              "    display: none;\n",
              "  }\n",
              "  .gradient {\n",
              "    background: linear-gradient(90deg, #fafafa 15%, #fafafa00 100%);\n",
              "  }\n",
              "}\n",
              "@media (prefers-color-scheme: dark) {\n",
              "  .container {\n",
              "    background-color: #1f1f1f;\n",
              "    box-shadow: 0 0 0 1px #ffffff26;\n",
              "  }\n",
              "  .headline-label {\n",
              "    color: #fff;\n",
              "  }\n",
              "  .chip {\n",
              "    background-color: #2c2c2c;\n",
              "    border-color: #3c4043;\n",
              "    color: #fff;\n",
              "    text-decoration: none;\n",
              "  }\n",
              "  .chip:hover {\n",
              "    background-color: #353536;\n",
              "  }\n",
              "  .chip:focus {\n",
              "    background-color: #353536;\n",
              "  }\n",
              "  .chip:active {\n",
              "    background-color: #464849;\n",
              "    border-color: #53575b;\n",
              "  }\n",
              "  .logo-light {\n",
              "    display: none;\n",
              "  }\n",
              "  .gradient {\n",
              "    background: linear-gradient(90deg, #1f1f1f 15%, #1f1f1f00 100%);\n",
              "  }\n",
              "}\n",
              "</style>\n",
              "<div class=\"container\">\n",
              "  <div class=\"headline\">\n",
              "    <svg class=\"logo-light\" width=\"18\" height=\"18\" viewBox=\"9 9 35 35\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n",
              "      <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M42.8622 27.0064C42.8622 25.7839 42.7525 24.6084 42.5487 23.4799H26.3109V30.1568H35.5897C35.1821 32.3041 33.9596 34.1222 32.1258 35.3448V39.6864H37.7213C40.9814 36.677 42.8622 32.2571 42.8622 27.0064V27.0064Z\" fill=\"#4285F4\"/>\n",
              "      <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M26.3109 43.8555C30.9659 43.8555 34.8687 42.3195 37.7213 39.6863L32.1258 35.3447C30.5898 36.3792 28.6306 37.0061 26.3109 37.0061C21.8282 37.0061 18.0195 33.9811 16.6559 29.906H10.9194V34.3573C13.7563 39.9841 19.5712 43.8555 26.3109 43.8555V43.8555Z\" fill=\"#34A853\"/>\n",
              "      <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M16.6559 29.8904C16.3111 28.8559 16.1074 27.7588 16.1074 26.6146C16.1074 25.4704 16.3111 24.3733 16.6559 23.3388V18.8875H10.9194C9.74388 21.2072 9.06992 23.8247 9.06992 26.6146C9.06992 29.4045 9.74388 32.022 10.9194 34.3417L15.3864 30.8621L16.6559 29.8904V29.8904Z\" fill=\"#FBBC05\"/>\n",
              "      <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M26.3109 16.2386C28.85 16.2386 31.107 17.1164 32.9095 18.8091L37.8466 13.8719C34.853 11.082 30.9659 9.3736 26.3109 9.3736C19.5712 9.3736 13.7563 13.245 10.9194 18.8875L16.6559 23.3388C18.0195 19.2636 21.8282 16.2386 26.3109 16.2386V16.2386Z\" fill=\"#EA4335\"/>\n",
              "    </svg>\n",
              "    <svg class=\"logo-dark\" width=\"18\" height=\"18\" viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\">\n",
              "      <circle cx=\"24\" cy=\"23\" fill=\"#FFF\" r=\"22\"/>\n",
              "      <path d=\"M33.76 34.26c2.75-2.56 4.49-6.37 4.49-11.26 0-.89-.08-1.84-.29-3H24.01v5.99h8.03c-.4 2.02-1.5 3.56-3.07 4.56v.75l3.91 2.97h.88z\" fill=\"#4285F4\"/>\n",
              "      <path d=\"M15.58 25.77A8.845 8.845 0 0 0 24 31.86c1.92 0 3.62-.46 4.97-1.31l4.79 3.71C31.14 36.7 27.65 38 24 38c-5.93 0-11.01-3.4-13.45-8.36l.17-1.01 4.06-2.85h.8z\" fill=\"#34A853\"/>\n",
              "      <path d=\"M15.59 20.21a8.864 8.864 0 0 0 0 5.58l-5.03 3.86c-.98-2-1.53-4.25-1.53-6.64 0-2.39.55-4.64 1.53-6.64l1-.22 3.81 2.98.22 1.08z\" fill=\"#FBBC05\"/>\n",
              "      <path d=\"M24 14.14c2.11 0 4.02.75 5.52 1.98l4.36-4.36C31.22 9.43 27.81 8 24 8c-5.93 0-11.01 3.4-13.45 8.36l5.03 3.85A8.86 8.86 0 0 1 24 14.14z\" fill=\"#EA4335\"/>\n",
              "    </svg>\n",
              "    <div class=\"gradient-container\"><div class=\"gradient\"></div></div>\n",
              "  </div>\n",
              "  <div class=\"carousel\">\n",
              "    <a class=\"chip\" href=\"https://vertexaisearch.cloud.google.com/grounding-api-redirect/AbF9wXFnqDMe0jiBp31G3RGe2bC-WgZLiP7sX3W0dYiviBurRyxMAcFcSFJeUYBml_XCIegulvTd2c1UrRPGz0q0KLCdvzC0lH48Vf9WDZ_46wajoWrkYmkA4-ylLr73_OxTX_UrfjOGyQsMMyeBoHzme3Oa24fMiTL7t4OQD1jfvpNNipnUZirm0eWeIqwFVU3S5UTea3kxHZMHUdSOx0lSq65nyGorWF1zEyhjO66ojYr9GBs5IEkqxu6y\">Próxima Imersão IA com Google Gemini Alura</a>\n",
              "  </div>\n",
              "</div>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Instalar Framework ADK de agentes do Google ################################################\n",
        "%pip install -q google-adk\n"
      ],
      "metadata": {
        "id": "hvZ3UnPI4jhJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dff7dd39-d1ab-4334-9ca9-edee6d129530"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/1.2 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m40.7 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m26.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/232.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m232.1/232.1 kB\u001b[0m \u001b[31m15.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/95.2 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.2/95.2 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/217.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m217.1/217.1 kB\u001b[0m \u001b[31m15.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/334.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m334.1/334.1 kB\u001b[0m \u001b[31m22.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m125.1/125.1 kB\u001b[0m \u001b[31m9.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m65.8/65.8 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m119.0/119.0 kB\u001b[0m \u001b[31m9.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.9/194.9 kB\u001b[0m \u001b[31m14.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m103.3/103.3 kB\u001b[0m \u001b[31m8.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.4/44.4 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "aePV2bdfDeoW"
      },
      "outputs": [],
      "source": [
        "from google.adk.agents import Agent\n",
        "from google.adk.runners import Runner\n",
        "from google.adk.sessions import InMemorySessionService\n",
        "from google.adk.tools import google_search\n",
        "from google.genai import types  # Para criar conteúdos (Content e Part)\n",
        "from datetime import date\n",
        "import textwrap # Para formatar melhor a saída de texto\n",
        "from IPython.display import display, Markdown # Para exibir texto formatado no Colab\n",
        "import requests # Para fazer requisições HTTP\n",
        "import warnings\n",
        "\n",
        "warnings.filterwarnings(\"ignore\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final\n",
        "def call_agent(agent: Agent, message_text: str) -> str:\n",
        "    # Cria um serviço de sessão em memória\n",
        "    session_service = InMemorySessionService()\n",
        "    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)\n",
        "    session = session_service.create_session(app_name=agent.name, user_id=\"user1\", session_id=\"session1\")\n",
        "    # Cria um Runner para o agente\n",
        "    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)\n",
        "    # Cria o conteúdo da mensagem de entrada\n",
        "    content = types.Content(role=\"user\", parts=[types.Part(text=message_text)])\n",
        "\n",
        "    final_response = \"\"\n",
        "    # Itera assincronamente pelos eventos retornados durante a execução do agente\n",
        "    for event in runner.run(user_id=\"user1\", session_id=\"session1\", new_message=content):\n",
        "        if event.is_final_response():\n",
        "          for part in event.content.parts:\n",
        "            if part.text is not None:\n",
        "              final_response += part.text\n",
        "              final_response += \"\\n\"\n",
        "    return final_response"
      ],
      "metadata": {
        "id": "_xP4lWhsS5ko"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Função auxiliar para exibir texto formatado em Markdown no Colab\n",
        "def to_markdown(text):\n",
        "  text = text.replace('•', '  *')\n",
        "  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))"
      ],
      "metadata": {
        "id": "8dosiodaxfFR"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "##########################################\n",
        "# --- Agente 1: Buscador de Notícias --- #\n",
        "##########################################\n",
        "def agente_buscador(topico, data_de_hoje):\n",
        "\n",
        "    buscador = Agent(\n",
        "        name=\"agente_buscador\",\n",
        "        model=\"gemini-2.0-flash\",\n",
        "        instruction=\"\"\"\n",
        "        Você é um assistente de pesquisa e sua tarefa é usar a ferramenta de busca do google (google search) para recuperar as ultimas\n",
        "        noticias de lançamentos muito relevantes sobre o topico abaixo.\n",
        "        Foque no maximo em 4 lançamentos relevantes, com base na quantidade e entusiasmo das noticias sobre ele.\n",
        "        Se um tema tiver poucas noticias ou reações entusiasmadas, é possivel que não seja um tema tão relevante, e pode ser substituido por outro que tenha mais.\n",
        "        Esses lançamentos relevantes devem  ser atuais, de no maximo 30 dias antes da data de hoje.\n",
        "        \"\"\",\n",
        "        description=\"Agente que busca informações no Google\",\n",
        "        tools={google_search}\n",
        "    )\n",
        "\n",
        "    entrada_do_agente_buscador = f\"Tópico: {topico}\\nData de hoje: {data_de_hoje}\"\n",
        "\n",
        "    lancamentos = call_agent(buscador, entrada_do_agente_buscador)\n",
        "\n",
        "    return lancamentos"
      ],
      "metadata": {
        "id": "o8bqIfi_DyH8"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "################################################\n",
        "# --- Agente 2: Planejador de posts --- #\n",
        "################################################\n",
        "def agente_planejador(topico, lancamentos_buscados):\n",
        "    planejador = Agent(\n",
        "        name=\"agente_planejador\",\n",
        "        model=\"gemini-2.0-flash\",\n",
        "        # Inserir as instruções do Agente Planejador #################################################\n",
        "        instruction=\"\"\"\n",
        "        Você é um planejador de conteúdo, especialista em redes sociais. Com base na lista de lançamentos mais recentes e relevantes buscados, você deve:\n",
        "        usar a ferramenta do google (google_search) para criar um plano sobre quais são os pontos mais relevantes que poderiamos abordar em um post, sobre\n",
        "        cada um deles. Você tambem pode usar o (google_search) para encontrar mais informações sobre os temas e aprofundar.\n",
        "        Ao final, você irá escolher o tema mais relevante entre eles com base nas suas pesquisas e retornar esse tema, seus pontos mais relevantes, e um plano\n",
        "        com os assuntos a serem abordados no post que será escrito posteriormente.\n",
        "        \"\"\",\n",
        "        description=\"Agente que planeja posts\",\n",
        "        tools=[google_search]\n",
        "    )\n",
        "\n",
        "    entrada_do_agente_planejador = f\"Tópico:{topico}\\nLançamentos buscados: {lancamentos_buscados}\"\n",
        "    # Executa o agente\n",
        "    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)\n",
        "    return plano_do_post"
      ],
      "metadata": {
        "id": "y3VO1uo5_ghO"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "######################################\n",
        "# --- Agente 3: Redator do Post --- #\n",
        "######################################\n",
        "def agente_redator(topico, plano_de_post):\n",
        "    redator = Agent(\n",
        "        name=\"agente_redator\",\n",
        "        model=\"gemini-2.0-flash\",\n",
        "        instruction=\"\"\"\n",
        "            Você é um Redator Criativo especializado em criar posts virais para redes sociais.\n",
        "            Você escreve posts para um site de notícias sobre novidades no munda da tecnologia.\n",
        "            Utilize o tema fornecido no plano de post e os pontos mais relevantes fornecidos e, com base nisso,\n",
        "            escreva um rascunho de post para Instagram sobre o tema indicado.\n",
        "            O post deve ser engajador, informativo, com linguagem simples e incluir 2 a 4 hashtags no final.\n",
        "            \"\"\",\n",
        "        description=\"Agente redator de posts engajadores para Instagram\"\n",
        "    )\n",
        "    entrada_do_agente_redator = f\"Tópico: {topico}\\nPlano de post: {plano_de_post}\"\n",
        "    # Executa o agente\n",
        "    rascunho_do_post = call_agent(redator, entrada_do_agente_redator)\n",
        "    return rascunho_do_post"
      ],
      "metadata": {
        "id": "uOqlg2TRLVh1"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "##########################################\n",
        "# --- Agente 4: Revisor de Qualidade --- #\n",
        "##########################################\n",
        "def agente_revisor(topico, rascunho_gerado):\n",
        "    revisor = Agent(\n",
        "        name=\"agente_revisor\",\n",
        "        model=\"gemini-2.0-flash\",\n",
        "        instruction=\"\"\"\n",
        "            Você é um Editor e Revisor de Conteúdo meticuloso, especializado em posts para redes sociais, com foco no Instagram.\n",
        "            Por ter um público jovem, entre 18 e 30 anos, use um tom de escrita adequado.\n",
        "            Revise o rascunho de post de Instagram abaixo sobre o tópico indicado, verificando clareza, concisão, correção e tom.\n",
        "            Se o rascunho estiver bom, responda apenas 'O rascunho está ótimo e pronto para publicar!'.\n",
        "            Caso haja problemas, aponte-os e sugira melhorias.\n",
        "            \"\"\",\n",
        "        description=\"Agente revisor de post para redes sociais.\"\n",
        "    )\n",
        "    entrada_do_agente_revisor = f\"Tópico: {topico}\\nRascunho: {rascunho_gerado}\"\n",
        "    # Executa o agente\n",
        "    post_final = call_agent(revisor, entrada_do_agente_revisor)\n",
        "    return post_final"
      ],
      "metadata": {
        "id": "_aTb1SdkLeT6"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_de_hoje = date.today().strftime(\"%d/%m/%Y\")\n",
        "\n",
        "print(\"🚀 Iniciando o Sistema de Criação de Posts para Instagram com 4 Agentes 🚀\")\n",
        "\n",
        "# --- Obter o Tópico do Usuário ---\n",
        "topico = input(\"❓ Por favor, digite o TÓPICO sobre o qual você quer criar o post de tendências: \")\n",
        "\n",
        "# Inserir lógica do sistema de agentes ################################################\n",
        "if not topico:\n",
        "  print(\"Você esque ceu de digitar o topico!\")\n",
        "else:\n",
        "  print(f\"Otimo! Vamos criar o post sobre as novidades do {topico}\")\n",
        "\n",
        "  lancamentos_buscados = agente_buscador(topico, data_de_hoje)\n",
        "  print(\"\\n--- Resultado do agente 1 (buscador) ---\\n\")\n",
        "  display(to_markdown(lancamentos_buscados))\n",
        "  print(\"-------------------\")\n",
        "\n",
        "  plano_de_post = agente_planejador(topico, lancamentos_buscados)\n",
        "  print(\"\\n--- Resultado do agente 2 (planejador) ---\\n\")\n",
        "  display(to_markdown(plano_de_post))\n",
        "  print(\"-------------------\")\n",
        "\n",
        "  rascunho_de_post = agente_redator(topico, plano_de_post)\n",
        "  print(\"\\n--- Resultado do agente 3 (redator) ---\\n\")\n",
        "  display(to_markdown(rascunho_de_post))\n",
        "  print(\"-------------------\")\n",
        "\n",
        "  texto_revisado = agente_revisor(topico, rascunho_de_post)\n",
        "  print(\"\\n--- Resultado do agente 4 (revisor) ---\\n\")\n",
        "  display(to_markdown(texto_revisado))"
      ],
      "metadata": {
        "id": "630ummxz4myx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "55ec097f-b682-487b-86e8-3b23e3097df7"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🚀 Iniciando o Sistema de Criação de Posts para Instagram com 4 Agentes 🚀\n",
            "❓ Por favor, digite o TÓPICO sobre o qual você quer criar o post de tendências: agentes\n",
            "Otimo! Vamos criar o post sobre as novidades do agentes\n",
            "\n",
            "--- Resultado do agente 1 (buscador) ---\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Markdown object>"
            ],
            "text/markdown": "> Aqui estão alguns lançamentos recentes e relevantes sobre o tema de \"agentes\", com foco nos últimos 30 dias:\n> \n> \n> Com base nas informações encontradas, aqui estão alguns lançamentos e tendências notáveis relacionados a agentes de IA nos últimos 30 dias:\n> \n> 1.  **IBM watsonx Orchestrate:** A IBM anunciou atualizações para o watsonx Orchestrate, oferecendo ferramentas para integrar, personalizar e implementar agentes de IA. Inclui um Agent Catalog que simplifica a integração com mais de 80 aplicações empresariais (IBM).\n> \n> 2.  **Frameworks Open-Source:** Vários frameworks open-source estão ganhando destaque, como o Open AI Agents SDK para sistemas multi-agente, MetaGPT para programação em linguagem natural, e TenAgent para IA conversacional em tempo real (ChatGPT Brasil).\n> \n> 3.  **Ferramentas para Criação de Agentes:** Ferramentas como Dify, CrewAI, Synthflow e LangChain estão facilitando o desenvolvimento de agentes de IA, permitindo a automação de tarefas e a criação de soluções personalizadas (YouTube).\n> \n> 4.  **Plataformas de Agentes de IA:** Plataformas como Outsystems AI Agent Builder e Botpress estão sendo utilizadas para criar agentes inteligentes com interfaces intuitivas e funcionalidades de arrastar e soltar (tl;dv, Botpress).\n> \n> Esses lançamentos e tendências indicam um crescimento significativo no desenvolvimento e implementação de agentes de IA, com foco em automação, personalização e integração com diversas aplicações e sistemas.\n> \n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------\n",
            "\n",
            "--- Resultado do agente 2 (planejador) ---\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Markdown object>"
            ],
            "text/markdown": "> Okay, com base nos lançamentos sobre agentes de IA, vou usar o Google para pesquisar mais informações sobre cada um dos tópicos e criar um plano de conteúdo.\n> \n> \n> Com base na pesquisa, o tema mais relevante para um post é: **Frameworks e Ferramentas para Criação de Agentes de IA.**\n> \n> **Justificativa:**\n> \n> *   **Popularidade e Tendência:** Há um grande número de frameworks e ferramentas sendo lançados e atualizados, indicando um interesse crescente e um mercado em expansão.\n> *   **Acessibilidade:** Muitas dessas ferramentas são open-source ou oferecem opções no-code, tornando a criação de agentes de IA mais acessível para um público mais amplo.\n> *   **Variedade:** A diversidade de ferramentas (LangChain, CrewAI, Dify, OutSystems AI Agent Builder, etc.) permite abordar diferentes casos de uso e níveis de especialização.\n> *   **Inovação:** As ferramentas mais recentes incorporam funcionalidades avançadas como sistemas multi-agente, integração com LLMs, e automação de tarefas complexas.\n> \n> **Tópicos Relevantes a serem Abordados no Post:**\n> \n> 1.  **O que são Agentes de IA e por que eles são importantes?**\n>     *   Definição de agentes de IA e como eles diferem de chatbots tradicionais.\n>     *   Aplicações práticas e benefícios da utilização de agentes de IA em diversos setores (automação, atendimento ao cliente, análise de dados, etc.).\n>     *   Como os agentes de IA podem ajudar empresas a otimizar processos e aumentar a eficiência.\n> \n> 2.  **Frameworks Open-Source para Agentes de IA:**\n>     *   **Open AI Agents SDK:**\n>         *   Recursos principais: sistemas multi-agente, handoffs, guardrails, rastreamento.\n>         *   Casos de uso: orquestração de fluxos de trabalho complexos.\n>     *   **MetaGPT:**\n>         *   Recursos principais: programação em linguagem natural, simulação de empresas de software.\n>     *   **TenAgent:**\n>         *   Recursos principais: IA conversacional em tempo real, integração com hardware.\n>     *   **CrewAI:**\n>         *   Recursos principais: sistemas multi-agente, atribuição de funções, tomada de decisões autônomas.\n>     *   **LangChain:**\n>         *   Recursos principais: criação de agentes com LLMs, integração com ferramentas externas.\n>         *  Explicar a diferença entre Langchain e LangGraph\n>         *   Casos de uso: construir agentes personalizados.\n> \n> 3.  **Ferramentas No-Code/Low-Code para Criação de Agentes de IA:**\n>     *   **Dify:**\n>         *   Recursos principais: interface intuitiva, configuração de fluxos conversacionais, integração com modelos diversos.\n>         *   Casos de uso: criação de chatbots inteligentes e assistentes virtuais.\n>     *   **Outsystems AI Agent Builder:**\n>         *   Recursos principais: interface de arrastar e soltar, criação de agentes sem código, integração com aplicações existentes.\n>         *   Casos de uso: desenvolvimento rápido de agentes personalizados para empresas.\n>     *   **Botpress:**\n>         *   Recursos principais: plataforma completa para criação de agentes de IA, API para expansão de funcionalidades.\n>     *   **Synthflow:**\n>         *   Criação de agentes de voz sem código.\n> \n> 4.  **IBM watsonx Orchestrate:**\n>     *   Recursos principais: integração, personalização e implementação de agentes de IA, Agent Catalog com aplicações empresariais.\n>     *   Casos de uso: automatização de tarefas repetitivas e complexas em diversos departamentos.\n> \n> 5.  **Comparativo entre as Ferramentas:**\n>     *   Análise das vantagens e desvantagens de cada ferramenta.\n>     *   Indicação de qual ferramenta é mais adequada para diferentes casos de uso e níveis de experiência.\n>     *   Considerações sobre custo, facilidade de uso, escalabilidade e personalização.\n> \n> 6.  **Tendências Futuras:**\n>     *   A evolução dos agentes de IA e o impacto na automação e nos negócios.\n>     *   O papel dos LLMs e da IA generativa na criação de agentes mais inteligentes e eficientes.\n>     *   A importância da segurança e da ética no desenvolvimento e implementação de agentes de IA.\n> \n> **Plano de Conteúdo para o Post:**\n> \n> 1.  **Título:** \"Guia Completo: As Melhores Ferramentas para Criar Agentes de IA em 2025\"\n> 2.  **Introdução:**\n>     *   Breve explicação sobre o que são agentes de IA e por que eles estão ganhando popularidade.\n>     *   Apresentação dos objetivos do post e o que o leitor pode esperar aprender.\n> 3.  **O que são Agentes de IA?**\n>     *   Definição detalhada e comparação com chatbots.\n>     *   Exemplos de aplicações práticas em diferentes setores.\n> 4.  **Frameworks Open-Source:**\n>     *   Descrição detalhada de cada framework (Open AI Agents SDK, MetaGPT, TenAgent, CrewAI, LangChain).\n>     *   Recursos principais, casos de uso e exemplos de implementação.\n> 5.  **Ferramentas No-Code/Low-Code:**\n>     *   Descrição detalhada de cada ferramenta (Dify, Outsystems AI Agent Builder, Botpress, Synthflow).\n>     *   Recursos principais, casos de uso e exemplos de implementação.\n> 6.  **IBM watsonx Orchestrate:**\n>     *   Descrição detalhada da plataforma e seus recursos.\n>     *   Casos de uso e exemplos de implementação.\n> 7.  **Comparativo entre as Ferramentas:**\n>     *   Tabela comparativa com as principais características de cada ferramenta.\n>     *   Análise das vantagens e desvantagens.\n>     *   Indicações de qual ferramenta é mais adequada para diferentes necessidades.\n> 8.  **Tendências Futuras:**\n>     *   Discussão sobre a evolução dos agentes de IA e o impacto nos negócios.\n>     *   O papel dos LLMs e da IA generativa.\n>     *   A importância da segurança e da ética.\n> 9.  **Conclusão:**\n>     *   Recapitulação dos principais pontos abordados no post.\n>     *   Incentivo para os leitores explorarem as ferramentas e começarem a criar seus próprios agentes de IA.\n>     *   Chamada para ação (ex: \"Compartilhe este post com seus amigos!\" ou \"Deixe um comentário com suas dúvidas e experiências!\").\n> \n> This plan provides a comprehensive overview of the agent landscape, offering practical information and guidance for readers interested in exploring and implementing AI agents.\n> \n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------\n",
            "\n",
            "--- Resultado do agente 3 (redator) ---\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Markdown object>"
            ],
            "text/markdown": "> 🚨 **Guia Completo: As Melhores Ferramentas para Criar Agentes de IA em 2024!** 🚀\n> \n> 🤖 Já ouviu falar em Agentes de IA? Eles são a evolução dos chatbots e estão revolucionando a automação e a eficiência em diversas áreas! 🤯\n> \n> Neste post, vamos explorar:\n> \n> 1️⃣ **O que são Agentes de IA?** 🤔\n>    - Definição clara e exemplos práticos.\n>    - Por que eles são diferentes e mais poderosos que os chatbots tradicionais.\n> \n> 2️⃣ **Frameworks Open-Source:** 🛠️\n>    - **Open AI Agents SDK:** Sistemas multi-agente e fluxos complexos.\n>    - **MetaGPT:** Simulação de empresas de software com IA!\n>    - **CrewAI:** Agentes que trabalham em equipe e tomam decisões!\n>    - **LangChain:** Crie agentes personalizados com LLMs. Qual a diferença entre Langchain e LangGraph?\n> \n> 3️⃣ **Ferramentas No-Code/Low-Code:** 👩‍💻\n>    - **Dify:** Crie chatbots inteligentes sem precisar programar!\n>    - **Outsystems AI Agent Builder:** Arraste e solte para criar agentes personalizados.\n> \n> 🚀 **Prepare-se para o futuro da IA!** Descubra como essas ferramentas podem transformar seus projetos e sua empresa. 🤩\n> \n> 💬 Deixe um comentário com suas dúvidas e experiências! 👇\n> \n> #AgentesIA #InteligenciaArtificial #Inovacao #Tecnologia\n> \n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------\n",
            "\n",
            "--- Resultado do agente 4 (revisor) ---\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Markdown object>"
            ],
            "text/markdown": "> O rascunho está bom, mas podemos fazer alguns ajustes para deixá-lo ainda mais atraente e informativo para o público do Instagram:\n> \n> **Problemas identificados e sugestões:**\n> \n> *   **Tom:** Embora o tom seja bom, podemos adicionar um pouco mais de entusiasmo e usar emojis de forma mais eficaz para criar uma conexão mais forte com o público jovem.\n> *   **Formatação:** A formatação pode ser melhorada para facilitar a leitura no Instagram, que tem limitações de espaço.\n> *   **Chamada para ação:** Podemos fortalecer a chamada para ação para incentivar mais engajamento.\n> \n> **Rascunho revisado:**\n> \n> 🚨 **Alerta de Revolução da IA! 🤖 Descubra as Melhores Ferramentas para Criar Agentes de IA em 2024!** 🚀\n> \n> Cansado dos chatbots básicos? 😴 Os Agentes de IA chegaram para turbinar a automação e a eficiência em tudo! 🤯\n> \n> Neste guia, você vai EXPLODIR a sua mente com:\n> \n> 1️⃣ **O que são Agentes de IA?** 🤔\n>    *   Explicamos de forma clara e damos exemplos que você vai entender na hora! 😉\n>    *   Por que eles são MUITO mais poderosos que os chatbots que você já conhece. 💪\n> \n> 2️⃣ **Ferramentas Open-Source:** 🛠️\n>    *   **Open AI Agents SDK:** Crie sistemas com VÁRIOS agentes trabalhando juntos! 🤝\n>    *   **MetaGPT:** Que tal simular uma empresa de software INTEIRA com IA? 🏢\n>    *   **CrewAI:** Agentes que trabalham em equipe e decidem JUNTOS! 🧠\n>    *   **LangChain:** Personalize seus agentes com LLMs. (E a diferença entre Langchain e LangGraph? 🤔 A gente te explica!)\n> \n> 3️⃣ **Ferramentas No-Code/Low-Code:** 👩‍💻\n>    *   **Dify:** Chatbots inteligentes SEM precisar de código! ✨\n>    *   **Outsystems AI Agent Builder:** Crie agentes personalizados arrastando e soltando! 🖱️\n> \n> 🚀 **Prepare-se para o FUTURO da IA!** 🤩 Descubra como essas ferramentas vão TRANSFORMAR seus projetos e sua empresa! 💥\n> \n> 💬 Qual ferramenta te deixou mais curioso? Deixe um comentário e vamos trocar ideias! 👇\n> \n> #AgentesIA #InteligenciaArtificial #Inovacao #Tecnologia #AI #OpenAI #MetaGPT #Langchain #NoCode #LowCode\n> \n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}